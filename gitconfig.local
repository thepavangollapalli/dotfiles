[init]
  templatedir = ~/.git_template
[push]
  default = current
[color]
  ui = true
[alias]
  a  = add -p          # Add each file incremently
  aa = add --all       # Add all files
  ap = add --patch     # Add all with patch
  branches = for-each-ref --sort=-committerdate --format=\"%(color:blue)%(authordate:relative)\t%(color:red)%(authorname)\t%(color:white)%(color:bold)%(refname:short)\" refs/remotes
  ci = commit -v       # Commit
  cm = commit -m       # Commit with message
  co = checkout        # checkout a branch
  cos = checkout staging # checkout staging branch
  com = checkout master  # checkout master branch
  cob = checkout -b    # Checkout a new not yet existing branch
  f   = fetch -p       # Fetch from a repository and prune any remote tracking references that no longer exists ont he remote
  po = git push origin # push origin
  pf = push --force-with-lease
  st = status -sb      # Display status
  ba = branch -a       # List both remote-tracking and local branches
  bd = branch -d       # Delete a branch
  bD = branch -D       # Force delete a branch
  diff = diff --cached # Display the staged changes
  update-from = "!f() { git fetch $1 --prune; git merge --ff-only $1/$2 || git rebase --preserve-merges $1/$2; }; f"
  bdm = "!git branch --merged | grep -v '*' | xargs -n 1 git branch -d" # Delete all local branches, merged into the current branch

  branch-name = "!git rev-parse --abbrev-ref HEAD"
  publish = "!git push -u origin $(git branch-name)"
  update = "!f() { git fetch $1 --prune; git merge --ff-only $1/$2 || git rebase --preserve-merges $1/$2; }; f origin $(git branch-name)"
  unpublish = "!git push origin :$(git branch-name)"
  code-review = difftool origin/staging...
  unstage = reset HEAD

  aa = add --all
  bselect = !git branch | grep -v '^*' | fzf-tmux --reverse | xargs git checkout
  ca = commit --amend
  car = commit --amend --no-edit
  co = checkout
  conflicted = !vim +Conflicted
  copysha = !git rev-parse HEAD | pbcopy
  df = "!f() { [ \"$GIT_PREFIX\" != \"\" ] && cd "$GIT_PREFIX"; git diff --color $@ | diff-so-fancy | less --tabs=4 -RFX; }; f"
  dfw = !git df -w
  dc = "!f() { [ \"$GIT_PREFIX\" != \"\" ] && cd "$GIT_PREFIX"; git diff --color --cached $@ | diff-so-fancy | less --tabs=4 -RFX; }; f"
  dcw = !git dc -w
  fall = fetch --all
  glog = log -E -i --grep
  mup = !git checkout master && git pull && git checkout -
  pl = pull
  ps = push
  rbc = rebase --continue
  riu = !git rebase -i $(git rev-parse --abbrev-ref --symbolic-full-name @{u})
  rid = !git rebase -i $(git merge-base develop HEAD)
  rim = !git rebase -i $(git merge-base master HEAD)
  sl = log --oneline --decorate -20
  sla = log --oneline --decorate --graph --all
  slp = log --oneline --decorate
  slap = log --oneline --decorate --graph --all -30
  uncommit = reset --soft HEAD^
  unstage = reset
  upstream = rev-parse --abbrev-ref --symbolic-full-name @{u}
  ureset = !git reset --hard $(git upstream)

  # More helpful logs
  plog = log --graph --pretty='format:%C(red)%d%C(reset) %C(yellow)%h%C(reset) %ar %C(green)%aN%C(reset) %s'
  lg   = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  tlog = log --stat --since='1 Day Ago' --graph --pretty=oneline --abbrev-commit --date=relative

[core]
  excludesfile = ~/.gitignore
  autocrlf = input
[merge]
  ff = only
[commit]
  template = ~/.gitmessage
[fetch]
  prune = true
[rebase]
  autosquash = true
[user]
  name = Pavan Gollapalli
  email = pavankgollapalli@gmail.com
